type Query{
    transactions: [TransactionView]
    transactionById(id: ID!): TransactionView
    exceededTransactions(id: ID!): [TransactionExceeded]
}

type Mutation{
    addTransaction(transaction: TransactionInput): TransactionAdd
}

input TransactionInput{
    account_from:String!
    account_to: String
    currency_shortname: String
    sum: Float
    expense_category: String
}

type TransactionExceeded{
    id:ID!
    account_from:String
    account_to: String
    currency_shortname: String
    sum: Float
    expense_category: String
    datetime: String
    limit_sum: Float
    limit_datetime: String
    limit_currency_shortname: String
}

type TransactionAdd{
    account_from:String!
    account_to: String
    currency_shortname: String
    sum: Float
    expense_category: String
}

type TransactionView{
    id:ID!
    account_from: String!
    account_to: String!
    expense_category: String!
    datetime: String
    limit_exceeded: Boolean
    limit_id: Int
    currency_shortname: String!
    sum: Float!
}

type Account{
    id: ID!
    ownerId: Int
    number: String
    balance: Float!
    limits: [Limit]
    transactions: [TransactionView]
}

type Limit{
    id: ID!
    account: Account!
    limit: Float!
    dateLimit: String!
    type: String!
}